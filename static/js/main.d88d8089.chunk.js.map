{"version":3,"sources":["components/card.js","components/cards.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","useState","modal","setModal","className","name","substring","onClick","jobTitle","xmlns","width","height","viewBox","fill","d","Date","hireDate","toLocaleDateString","toDateString","href","email","mobile","replace","description","Cards","state","loading","employees","fetch","res","json","data","this","setState","console","log","map","employee","i","id","key","birthday","showAge","jobDescription","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAsFeA,MAnFf,SAAcC,GAAQ,IAAD,EAESC,oBAAS,GAFlB,mBAEVC,EAFU,KAEHC,EAFG,KAUnB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,eACb,0BAAMA,UAAU,aAAaJ,EAAMK,KAAKC,UAAU,EAAG,IACrD,4BAAQF,UAAU,eAAeG,QARrC,WACEJ,GAAS,OAST,yBAAKC,UAAU,cACb,wBAAIA,UAAU,cAAcJ,EAAMK,MAClC,uBAAGD,UAAU,cAAcJ,EAAMQ,WAGlCN,EACC,yBAAKE,UAAU,2EACb,yBAAKA,UAAU,gEACf,yBAAKA,UAAU,uDACb,yBAAKA,UAAU,yFACb,yBACEA,UAAU,kHACVG,QAzBZ,WACEJ,GAAS,KA0BC,yBACEM,MAAM,6BACNC,MAAO,GACPC,OAAQ,GACRC,QAAQ,YACRC,KAAK,WAEL,0BAAMC,EAAE,yHAGZ,yBAAKV,UAAU,iBACZ,IACD,yBAAKA,UAAU,0DACb,0BAAMA,UAAU,aAAaJ,EAAMK,KAAKC,UAAU,EAAG,KAEvD,yBAAKF,UAAU,qBACb,4BAAKJ,EAAMK,MACX,uBAAGD,UAAU,SAAb,IAAuBJ,EAAMQ,UAC7B,uBAAGJ,UAAU,UAAb,UACU,IAAIW,KAAJ,UAAYf,EAAMgB,WAAYC,qBAAsB,IAD9D,OAIA,uCACY,IACV,0BAAMb,UAAU,MACb,IAAIW,KAAJ,UAAYf,EAAMgB,WAAYE,iBAGnC,yBAAKd,UAAU,QACZ,uBAAGe,KAAI,iBAAYnB,EAAMoB,QAAzB,UAAyC,8BAAOpB,EAAMoB,QACzD,qCACS,8BAAOpB,EAAMqB,OACjBC,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,KAAM,UAKnB,2CACA,2BAAItB,EAAMuB,kBAOpB,uCCjCOC,E,kDA3Cb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IAGNyB,MAAQ,CACJC,SAAS,EACTC,UAAW,IANE,E,wLAUD,mD,SACMC,MADN,oD,cACNC,E,gBACaA,EAAIC,O,OAAjBC,E,OACNC,KAAKC,SAAS,CAAEN,UAAWI,IAC3BG,QAAQC,IAAIH,KAAKP,MAAME,W,qIAIzB,OACE,yBAAKvB,UAAU,mBAEP4B,KAAKP,MAAME,UAAUS,KAAI,SAASC,EAAUC,GACxC,OACE,kBAAC,EAAD,CACEC,GAAIF,EAASE,GACbC,IAAKH,EAAShC,KACd0B,KAAMM,EACNhC,KAAMgC,EAAShC,KACfG,SAAU6B,EAAS7B,SACnBY,MAAOiB,EAASjB,MAChBC,OAAQgB,EAAShB,OACjBL,SAAUqB,EAASrB,SACnByB,SAAUJ,EAASI,SACnBC,QAASL,EAASK,QAClBnB,YAAac,EAASM,yB,GAnC1BC,IAAMC,WCSXC,MARf,WACE,OACE,yBAAK1C,UAAU,OACd,kBAAC,EAAD,QCKe2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.d88d8089.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport Modal from \"./modal\";\r\n\r\nfunction Card(props) {\r\n\r\n    const [modal, setModal] = useState(false);\r\n    function closeModal() {\r\n      setModal(false);  \r\n    }\r\n    function openModal() {\r\n      setModal(true);\r\n  }\r\n \r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card__image\">\r\n        <span className=\"card__tag\">{props.name.substring(0, 3)}</span>\r\n        <button className=\"card__button\" onClick={openModal}></button>\r\n      </div>\r\n      <div className=\"card__body\">\r\n        <h3 className=\"card__head\">{props.name}</h3>\r\n        <p className=\"card__desc\">{props.jobTitle}</p>\r\n      </div>\r\n\r\n      {modal ? (\r\n        <div className=\"modal fixed w-full h-full top-0 left-0 flex items-center justify-center\">\r\n          <div className=\"modal-overlay absolute w-full h-full bg-gray-900 opacity-50\" />\r\n          <div className=\"modal-container w-11/12 mx-autoz-50 overflow-y-auto\">\r\n            <div className=\"modal-content bg-white relative mx-auto text-left w-full max-w-2xl rounded shadow-lg \">\r\n              <div\r\n                className=\"modal-close absolute top-0 right-0 cursor-pointer flex flex-col items-center mt-4 mr-4 text-white text-sm z-100\"\r\n                onClick={closeModal}\r\n              >\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width={18}\r\n                  height={18}\r\n                  viewBox=\"0 0 18 18\"\r\n                  fill=\"#000000\"\r\n                >\r\n                  <path d=\"M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z\" />\r\n                </svg>\r\n              </div>\r\n              <div className=\"flex flex-row\">\r\n                {\" \"}\r\n                <div className=\"flex justify-between w-5/12 items-center pb-3 bg-staff\">\r\n                  <span className=\"card__tag\">{props.name.substring(0, 3)}</span>\r\n                </div>\r\n                <div className=\"w-7/12 px-8 my-12\">\r\n                  <h3>{props.name}</h3>\r\n                  <p className=\"title\"> {props.jobTitle}</p>\r\n                  <p className=\"joined\">\r\n                    Joined:{new Date(`${props.hireDate}`).toLocaleDateString()}{\" \"}\r\n                    ago\r\n                  </p>\r\n                  <p>\r\n                    Birthday:{\" \"}\r\n                    <span className=\"bd\">\r\n                      {new Date(`${props.hireDate}`).toDateString()}\r\n                    </span>\r\n                  </p>\r\n                  <div className=\"info\">\r\n                     <a href={`mailto:${props.email}`}>Email: <span>{props.email}</span></a>\r\n                  <p>\r\n                    Mobile:<span>{props.mobile\r\n                      .replace(/-\\s?/g, \" \")\r\n                      .replace(/ \\s?/g, \" \")\r\n                      .replace(/x/g, \"ext\")}</span>\r\n                    \r\n                  </p>\r\n                  </div>\r\n                 \r\n                  <p>description:</p>\r\n                  <p>{props.description}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState } from \"react\";\r\nimport Card from \"./card\";\r\n\r\nclass Cards extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    }\r\n    \r\n    state = {\r\n        loading: true,\r\n        employees: [],\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const url = \"https://interview.dev.steinias.com/api/employees\";\r\n        const res = await fetch(url);\r\n        const data = await res.json();\r\n        this.setState({ employees: data });\r\n        console.log(this.state.employees);\r\n    }\r\n\r\n  render() {\r\n      return (\r\n        <div className=\"cards container\">\r\n            {\r\n                this.state.employees.map(function(employee, i){\r\n                    return (\r\n                      <Card\r\n                        id={employee.id}\r\n                        key={employee.name}\r\n                        data={employee}\r\n                        name={employee.name}\r\n                        jobTitle={employee.jobTitle}\r\n                        email={employee.email}\r\n                        mobile={employee.mobile}\r\n                        hireDate={employee.hireDate}\r\n                        birthday={employee.birthday}\r\n                        showAge={employee.showAge}\r\n                        description={employee.jobDescription}\r\n                      />\r\n                    );\r\n                })}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Cards;\r\n","import React from 'react';\nimport './App.css';\nimport Cards from './components/cards';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Cards/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./tailwind.generated.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}